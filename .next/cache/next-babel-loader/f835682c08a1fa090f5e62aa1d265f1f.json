{"ast":null,"code":"var FetchData = function FetchData(method, url, data) {\n  return new Promise(function (resolve, reject) {\n    switch (method) {\n      case \"GET\":\n        fetch(url + \"/webservice.php?\".concat(encodeFormData(data)), {\n          header: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Mode: \"no-cors\"\n          }\n        }).then(function (res) {\n          try {\n            if (res.ok) return res.json();\n          } catch (err) {\n            console.warn(e);\n          }\n        }).then(function (data) {\n          resolve(data);\n        });\n        break;\n\n      case \"POST\":\n        var body = encodeFormData({\n          operation: \"login\",\n          username: data.username,\n          accessKey: data.accessKey\n        });\n        fetch(url + \"/webservice.php\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: body\n        }).then(function (res) {\n          try {\n            if (res.ok) return res.json();\n          } catch (err) {\n            console.warn(e);\n          }\n        }).then(function (data) {\n          resolve(data);\n        });\n        break;\n    }\n  });\n};\n\n_c = FetchData;\n\nvar encodeFormData = function encodeFormData(data) {\n  return Object.keys(data).map(function (key) {\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]);\n  }).join(\"&\");\n};\n\nexport { FetchData };\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchData\");","map":{"version":3,"sources":["C:/Users/Adrian/Desktop/DummySystem/VGL/utils/helper.js"],"names":["FetchData","method","url","data","Promise","resolve","reject","fetch","encodeFormData","header","Mode","then","res","ok","json","err","console","warn","e","body","operation","username","accessKey","headers","Object","keys","map","key","encodeURIComponent","join"],"mappings":"AAAA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,EAAuB;AACvC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAQL,MAAR;AACE,WAAK,KAAL;AACEM,QAAAA,KAAK,CAACL,GAAG,6BAAsBM,cAAc,CAACL,IAAD,CAApC,CAAJ,EAAkD;AACrDM,UAAAA,MAAM,EAAE;AACN,4BAAgB,mCADV;AAENC,YAAAA,IAAI,EAAE;AAFA;AAD6C,SAAlD,CAAL,CAMGC,IANH,CAMQ,UAACC,GAAD,EAAS;AACb,cAAI;AACF,gBAAIA,GAAG,CAACC,EAAR,EAAY,OAAOD,GAAG,CAACE,IAAJ,EAAP;AACb,WAFD,CAEE,OAAOC,GAAP,EAAY;AACZC,YAAAA,OAAO,CAACC,IAAR,CAAaC,CAAb;AACD;AACF,SAZH,EAaGP,IAbH,CAaQ,UAACR,IAAD,EAAU;AACdE,UAAAA,OAAO,CAACF,IAAD,CAAP;AACD,SAfH;AAgBA;;AACF,WAAK,MAAL;AACE,YAAIgB,IAAI,GAAGX,cAAc,CAAC;AACxBY,UAAAA,SAAS,EAAE,OADa;AAExBC,UAAAA,QAAQ,EAAElB,IAAI,CAACkB,QAFS;AAGxBC,UAAAA,SAAS,EAAEnB,IAAI,CAACmB;AAHQ,SAAD,CAAzB;AAMAf,QAAAA,KAAK,CAACL,GAAG,oBAAJ,EAA0B;AAC7BD,UAAAA,MAAM,EAAE,MADqB;AAE7BsB,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB,WAFoB;AAG7BJ,UAAAA,IAAI,EAAEA;AAHuB,SAA1B,CAAL,CAKGR,IALH,CAKQ,UAACC,GAAD,EAAS;AACb,cAAI;AACF,gBAAIA,GAAG,CAACC,EAAR,EAAY,OAAOD,GAAG,CAACE,IAAJ,EAAP;AACb,WAFD,CAEE,OAAOC,GAAP,EAAY;AACZC,YAAAA,OAAO,CAACC,IAAR,CAAaC,CAAb;AACD;AACF,SAXH,EAYGP,IAZH,CAYQ,UAACR,IAAD,EAAU;AACdE,UAAAA,OAAO,CAACF,IAAD,CAAP;AACD,SAdH;AAeA;AAzCJ;AA2CD,GA5CM,CAAP;AA6CD,CA9CD;;KAAMH,S;;AAgDN,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACL,IAAD,EAAU;AAC/B,SAAOqB,MAAM,CAACC,IAAP,CAAYtB,IAAZ,EACJuB,GADI,CACA,UAACC,GAAD;AAAA,WAASC,kBAAkB,CAACD,GAAD,CAAlB,GAA0B,GAA1B,GAAgCC,kBAAkB,CAACzB,IAAI,CAACwB,GAAD,CAAL,CAA3D;AAAA,GADA,EAEJE,IAFI,CAEC,GAFD,CAAP;AAGD,CAJD;;AAMA,SAAS7B,SAAT","sourcesContent":["const FetchData = (method, url, data) => {\r\n  return new Promise((resolve, reject) => {\r\n    switch (method) {\r\n      case \"GET\":\r\n        fetch(url + `/webservice.php?${encodeFormData(data)}`, {\r\n          header: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n            Mode: \"no-cors\",\r\n          },\r\n        })\r\n          .then((res) => {\r\n            try {\r\n              if (res.ok) return res.json();\r\n            } catch (err) {\r\n              console.warn(e);\r\n            }\r\n          })\r\n          .then((data) => {\r\n            resolve(data);\r\n          });\r\n        break;\r\n      case \"POST\":\r\n        let body = encodeFormData({\r\n          operation: \"login\",\r\n          username: data.username,\r\n          accessKey: data.accessKey,\r\n        });\r\n\r\n        fetch(url + `/webservice.php`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n          body: body,\r\n        })\r\n          .then((res) => {\r\n            try {\r\n              if (res.ok) return res.json();\r\n            } catch (err) {\r\n              console.warn(e);\r\n            }\r\n          })\r\n          .then((data) => {\r\n            resolve(data);\r\n          });\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nconst encodeFormData = (data) => {\r\n  return Object.keys(data)\r\n    .map((key) => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\r\n    .join(\"&\");\r\n};\r\n\r\nexport { FetchData };\r\n"]},"metadata":{},"sourceType":"module"}