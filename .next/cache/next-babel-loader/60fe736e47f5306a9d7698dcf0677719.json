{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nexport let initState = {\n  token: \"\",\n  settings: {\n    url: \"\",\n    user: \"\",\n    accessKey: \"\"\n  },\n  credentials: {\n    sessionName: \"\",\n    userId: \"\"\n  }\n};\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"SET_SETTINGS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        settings: {\n          url: action.payload.url,\n          user: action.payload.user,\n          accessKey: action.payload.accessKey\n        }\n      });\n\n    case \"SET_CREDENTIAL\":\n      console.log(\"From reducer: \" + JSON.stringify(action.payload));\n      return _objectSpread(_objectSpread({}, state), {}, {\n        credentials: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst makeStore = context => createStore(reducer);\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Adrian/Desktop/DummySystem/VGL/redux/reducer.js"],"names":["createStore","createWrapper","initState","token","settings","url","user","accessKey","credentials","sessionName","userId","reducer","state","action","type","payload","console","log","JSON","stringify","makeStore","context","wrapper","debug"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,OAAO,IAAIC,SAAS,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,EAAE,EADG;AAERC,IAAAA,IAAI,EAAE,EAFE;AAGRC,IAAAA,SAAS,EAAE;AAHH,GAFW;AAOrBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,WAAW,EAAE,EADF;AAEXC,IAAAA,MAAM,EAAE;AAFG;AAPQ,CAAhB;;AAaP,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGV,SAAT,EAAoBW,MAApB,KAA+B;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,6CACKF,KADL;AAEER,QAAAA,QAAQ,EAAE;AACRC,UAAAA,GAAG,EAAEQ,MAAM,CAACE,OAAP,CAAeV,GADZ;AAERC,UAAAA,IAAI,EAAEO,MAAM,CAACE,OAAP,CAAeT,IAFb;AAGRC,UAAAA,SAAS,EAAEM,MAAM,CAACE,OAAP,CAAeR;AAHlB;AAFZ;;AAQF,SAAK,gBAAL;AACES,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBC,IAAI,CAACC,SAAL,CAAeN,MAAM,CAACE,OAAtB,CAA/B;AACA,6CACKH,KADL;AAEEJ,QAAAA,WAAW,EAAEK,MAAM,CAACE;AAFtB;;AAIF;AACE,aAAOH,KAAP;AAjBJ;AAmBD,CApBD;;AAsBA,MAAMQ,SAAS,GAAIC,OAAD,IAAarB,WAAW,CAACW,OAAD,CAA1C;;AACA,OAAO,MAAMW,OAAO,GAAGrB,aAAa,CAACmB,SAAD,EAAY;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore } from \"redux\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\n\r\nexport let initState = {\r\n  token: \"\",\r\n  settings: {\r\n    url: \"\",\r\n    user: \"\",\r\n    accessKey: \"\",\r\n  },\r\n  credentials: {\r\n    sessionName: \"\",\r\n    userId: \"\",\r\n  },\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_SETTINGS\":\r\n      return {\r\n        ...state,\r\n        settings: {\r\n          url: action.payload.url,\r\n          user: action.payload.user,\r\n          accessKey: action.payload.accessKey,\r\n        },\r\n      };\r\n    case \"SET_CREDENTIAL\":\r\n      console.log(\"From reducer: \" + JSON.stringify(action.payload));\r\n      return {\r\n        ...state,\r\n        credentials: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst makeStore = (context) => createStore(reducer);\r\nexport const wrapper = createWrapper(makeStore, { debug: true });\r\n"]},"metadata":{},"sourceType":"module"}